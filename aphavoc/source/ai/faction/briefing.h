// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MAX_NUMBER_OF_MISSION_TEXTS 	30

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TASK_BRIEFING_TYPE
{
	entity_sub_types
		task_type;

	int
		briefing_text1_count,
		briefing_text2_count,
		briefing_text3_count,
		debriefing_text_success_count,
		debriefing_text_partial_count,
		debriefing_text_failure_count;

	char
		*briefing_text1 [MAX_NUMBER_OF_MISSION_TEXTS],
		*briefing_text2 [MAX_NUMBER_OF_MISSION_TEXTS],
		*briefing_text3 [MAX_NUMBER_OF_MISSION_TEXTS],
		*debriefing_text_success [MAX_NUMBER_OF_MISSION_TEXTS],
		*debriefing_text_partial [MAX_NUMBER_OF_MISSION_TEXTS],
		*debriefing_text_failure [MAX_NUMBER_OF_MISSION_TEXTS];
};

typedef struct TASK_BRIEFING_TYPE task_briefing_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern task_briefing_type
	*task_briefing_database;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum EXTRA_BRIEFING_TYPES
{

	EXTRA_BRIEFING_MEDAL,
	EXTRA_BRIEFING_PROMOTION,
	EXTRA_BRIEFING_OBJECTIVES,
	NUM_EXTRA_BRIEFING_TYPES
};

typedef enum EXTRA_BRIEFING_TYPES extra_briefing_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct EXTRA_BRIEFING_TYPE
{

	extra_briefing_types
		type;

	int
		sub_type;

	int
		text_count;

	char
		*briefing_text [MAX_NUMBER_OF_MISSION_TEXTS];

	struct EXTRA_BRIEFING_TYPE
		*next;
};

typedef struct EXTRA_BRIEFING_TYPE extra_briefing_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern extra_briefing_type
	*extra_briefing_database;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void initialise_briefing_parser (void);

extern void deinitialise_briefing_parser (void);

extern int get_briefing_text (entity *task, char *text1, char *text2, char *text3);

extern int get_debriefing_text (entity *task, char **debrief, char **ff_debrief);

extern int get_medal_briefing_text (entity *task, int medal_type, char *medal_text);

extern int get_promotion_briefing_text (entity *task, int rank_type, char *rank_text);

extern int get_objective_briefing_text (entity *task, int objective_type, char *objective_text);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
